-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Agent.Interface.Broker exposing (Fragments, fragments, id, maybeFragments, name)

import Agent.InputObject
import Agent.Interface
import Agent.Object
import Agent.Scalar
import Agent.ScalarCodecs
import Agent.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (FragmentSelectionSet(..), SelectionSet(..))
import Json.Decode as Decode


type alias Fragments decodesTo =
    { onAgent : SelectionSet decodesTo Agent.Object.Agent
    , onSuperagent : SelectionSet decodesTo Agent.Object.Superagent
    }


{-| Build an exhaustive selection of type-specific fragments.
-}
fragments :
    Fragments decodesTo
    -> SelectionSet decodesTo Agent.Interface.Broker
fragments selections =
    Object.exhuastiveFragmentSelection
        [ Object.buildFragment "Agent" selections.onAgent
        , Object.buildFragment "Superagent" selections.onSuperagent
        ]


{-| Can be used to create a non-exhuastive set of fragments by using the record
update syntax to add `SelectionSet`s for the types you want to handle.
-}
maybeFragments : Fragments (Maybe decodesTo)
maybeFragments =
    { onAgent = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    , onSuperagent = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    }


{-| -}
id : SelectionSet Agent.ScalarCodecs.Id Agent.Interface.Broker
id =
    Object.selectionForField "ScalarCodecs.Id" "id" [] (Agent.ScalarCodecs.codecs |> Agent.Scalar.unwrapCodecs |> .codecId |> .decoder)


{-| -}
name : SelectionSet String Agent.Interface.Broker
name =
    Object.selectionForField "String" "name" [] Decode.string
