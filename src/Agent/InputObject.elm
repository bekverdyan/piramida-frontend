-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Agent.InputObject exposing (CreateAgentInput, CreateAgentInputRequiredFields, buildCreateAgentInput, encodeCreateAgentInput)

import Agent.Interface
import Agent.Object
import Agent.Scalar
import Agent.ScalarCodecs
import Agent.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


buildCreateAgentInput : CreateAgentInputRequiredFields -> CreateAgentInput
buildCreateAgentInput required =
    { name = required.name, brokerId = required.brokerId }


type alias CreateAgentInputRequiredFields =
    { name : String
    , brokerId : Agent.ScalarCodecs.Id
    }


{-| Type for the CreateAgentInput input object.
-}
type alias CreateAgentInput =
    { name : String
    , brokerId : Agent.ScalarCodecs.Id
    }


{-| Encode a CreateAgentInput into a value that can be used as an argument.
-}
encodeCreateAgentInput : CreateAgentInput -> Value
encodeCreateAgentInput input =
    Encode.maybeObject
        [ ( "name", Encode.string input.name |> Just ), ( "brokerId", (Agent.ScalarCodecs.codecs |> Agent.Scalar.unwrapEncoder .codecId) input.brokerId |> Just ) ]
